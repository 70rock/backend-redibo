// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genero {
  MASCULINO
  FEMENINO
  OTRO
}

enum EstadoReservacion {
  PENDIENTE
  CONFIRMADA
  EN_CURSO
  COMPLETADA
  CANCELADA
}

enum EstadoReporte {
  PENDIENTE
  EN_REVISION
  RESUELTO
  DESCARTADO
}

enum UserRole {
  ADMIN
  HOST
  RENTER
}

enum CarStatus {
  DISPONIBLE
  RESERVADO
  MANTENIMIENTO
}

model User {
  id              String    @id @default(cuid())
  nombre          String?   
  email           String    @unique
  password        String?
  googleId        String?   @unique
  image           String?
  telefono        String?
  genero          Genero?
  fechaNacimiento DateTime?
  direccion       String?
  ciudad          String?
  provincia       String?
  pais            String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Nuevo campo:
  role            UserRole  @default(RENTER)
  
  // Relationships
  reviews         Review[]  @relation("HostReviews")
  reports         Report[]  @relation("ReporterReports")
  reservations    Reservation[] @relation("HostReservations")
  cars            Car[] @relation("UserCars")
  
  // Solo mantiene calificaciones hechas, ya no recibidas
  calificacionesHechas    CalificacionHostUsuario[] @relation("Calificador")

  @@index([email])
  @@index([googleId])
}

model Renter {
  id              String    @id @default(cuid())
  firstName       String
  lastName        String
  email           String    @unique
  phone           String?
  occupation      String?
  address         String?
  age             Int?
  profilePicture  String?
  rating          Float     @default(0)
  memberSince     DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relationships
  reviews         Review[]  @relation("RenterReviews")
  reports         Report[]  @relation("RenterReports")
  reservations    Reservation[] @relation("RenterReservations")
  favoritos       Favorito[]
  
  // Nueva relación: calificaciones recibidas
  calificacionesRecibidas CalificacionHostUsuario[] @relation("CalificadoRenter")

  // Nueva relación: comentarios
  carComments CarComment[]

  @@index([email])
}

model Car {
  id                  String    @id @default(cuid())
  vin                 String?   
  año                 Int
  marca               String
  modelo              String
  placa               String    @unique
  asientos            Int?
  puertas             Int?
  soat                Boolean?
  precioPorDia        Float
  numMantenimientos   Int?
  transmision         String?
  estado              CarStatus @default(DISPONIBLE)
  direccion           String?
  ciudad              String?
  provincia           String?
  pais                String?
  color               String
  
  // Owner relationship
  userId              String
  user                User      @relation("UserCars", fields: [userId], references: [id], onDelete: Cascade)
  
  // Other relationships
  combustibles        Combustible[]
  caracteristicas     CaracteristicaAdicional[]
  imagenes            Imagen[]
  favoritos           Favorito[]
  reservations        Reservation[]
  reviews             Review[]
  
  // Nueva relación: comentarios
  comments    CarComment[]
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([userId])
  @@index([marca, modelo])
  @@index([ciudad, provincia, pais])
}

model Reservation {
  id              String            @id @default(cuid())
  renterId        String
  hostId          String
  carId           String?
  fechaInicio     DateTime
  fechaFin        DateTime
  fechaCreacion   DateTime          @default(now())
  fechaExpiracion DateTime?
  estado          EstadoReservacion @default(PENDIENTE)
  descuentoId     String?
  
  // Relationships
  renter          Renter            @relation("RenterReservations", fields: [renterId], references: [id], onDelete: Cascade)
  host            User              @relation("HostReservations", fields: [hostId], references: [id], onDelete: Cascade)
  car             Car?              @relation(fields: [carId], references: [id], onDelete: SetNull)
  descuento       Descuento?        @relation(fields: [descuentoId], references: [id])
  reviews         Review[]
  calificaciones  CalificacionHostUsuario[]
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([renterId])
  @@index([hostId])
  @@index([carId])
  @@index([fechaInicio, fechaFin])
}

model Review {
  id                String    @id @default(cuid())
  renterId          String
  hostId            String
  reservationId     String
  carId             String?
  rating            Int
  behaviorRating    Int
  carCareRating     Int
  punctualityRating Int
  comment           String?
  hostName          String
  hostPicture       String?
  renterName        String
  
  // Relationships
  renter            Renter    @relation("RenterReviews", fields: [renterId], references: [id], onDelete: Cascade)
  host              User      @relation("HostReviews", fields: [hostId], references: [id], onDelete: Cascade)
  reservation       Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  car               Car?      @relation(fields: [carId], references: [id], onDelete: SetNull)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([renterId])
  @@index([hostId])
  @@index([reservationId])
  @@index([carId])
}

model Report {
  id              String        @id @default(cuid())
  renterId        String
  reporterId      String
  reason          String
  additionalInfo  String?
  status          EstadoReporte @default(PENDIENTE)
  
  // Relationships
  renter          Renter        @relation("RenterReports", fields: [renterId], references: [id], onDelete: Cascade)
  reporter        User          @relation("ReporterReports", fields: [reporterId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([renterId])
  @@index([reporterId])
}

model Combustible {
  id                String    @id @default(cuid())
  tipoDeCombustible String
  carId             String
  car               Car       @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([carId])
}

model CaracteristicaAdicional {
  id        String    @id @default(cuid())
  nombre    String
  carId     String
  car       Car       @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([carId])
}

model Imagen {
  id        String    @id @default(cuid())
  url       String
  carId     String
  car       Car       @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@index([carId])
}

model Favorito {
  id        String    @id @default(cuid())
  renterId  String
  carId     String
  
  // Relationships
  renter    Renter    @relation(fields: [renterId], references: [id], onDelete: Cascade)
  car       Car       @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([renterId, carId])
  @@index([renterId])
  @@index([carId])
}

model Descuento {
  id         String    @id @default(cuid())
  fecha      DateTime
  porcentaje Float
  
  // Relationships
  reservas   Reservation[]
}

model CalificacionHostUsuario {
  id                String    @id @default(cuid())
  comportamiento    Int       // Calificación del comportamiento
  cuidadoVehiculo   Int       // Calificación del cuidado del vehículo
  puntualidad       Int       // Calificación de la puntualidad
  comentario        String?   // Campo para comentarios
  
  // Relationships
  reservationId     String    // Relación con la reserva
  reservation       Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  
  // El calificador sigue siendo un User (host)
  calificadorId     String    // Usuario que realiza la calificación
  calificador       User      @relation("Calificador", fields: [calificadorId], references: [id], onDelete: Cascade)
  
  // El calificado ahora es un Renter
  calificadoId      String    // Renter que recibe la calificación
  calificado        Renter    @relation("CalificadoRenter", fields: [calificadoId], references: [id], onDelete: Cascade)
  
  fechaCreacion     DateTime  @default(now()) // Fecha de creación de la calificación

  @@index([reservationId])
  @@index([calificadorId])
  @@index([calificadoId])
}

model CarComment {
  id          String    @id @default(cuid())
  carId       String
  renterId    String
  comment     String
  rating      Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  car         Car       @relation(fields: [carId], references: [id], onDelete: Cascade)
  renter      Renter    @relation(fields: [renterId], references: [id], onDelete: Cascade)

  @@index([carId])
  @@index([renterId])
}
